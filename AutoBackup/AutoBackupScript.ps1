# Auto Backup Script
# Should be setup as a scheduled task to automate running of the script
# Output backups will be compressed and stored in archives
# Cleans up backups older than specified retention period
# Error reporting not added yet

##############################
# Customizable Variables     #
##############################

# These variables should be set by the user desiring backups

# Specify the number of days to store a backup. Backups older than this value will be deleted
$RetentionDays    = 30

# Specify the minimum number of backups to save. This is a failsafe in case new backups aren't being generated
$MinimumBackups   = 3

# Specify backup folder. This is the folder where you want to store backups. It's suggested that this is set to a separate drive
$ArchiveFolder    = "Z:\AutoBackup"

# Specify source paths. These are the folders you want to backup
$SourcePaths      = @("C:\Users\aUserName\Documents","C:\Users\aUserName\Pictures")

# Specify compression level. Valid values from least to compression: NoCompression, Fastest, Optimal
$CompressionLevel = "Optimal"

##############################
# Create Backups             #
##############################

# Autogenerated variables
$TimeStamp          = Get-Date -Format 'yyyy.MM.dd.HHmm'
$TempFolder         = "$ArchiveFolder\Temp"
$FolderName         = "$($TimeStamp)_Backup.zip"
$DestinationArchive = "$ArchiveFolder\$FolderName"

# Create temporary folder to store backup data
New-Item -Path $TempFolder -ItemType Directory

# Copy source files to temporary folder
foreach ($SourcePath in $SourcePaths) { Copy-Item -Path $SourcePath -Destination $TempFolder -Recurse }

# Compress temporary folder into time stamped archive
Compress-Archive -Path "$TempFolder\*" -DestinationPath $DestinationArchive -CompressionLevel $CompressionLevel

# Remove temporary folder
Remove-Item -Path $TempFolder -Recurse -Force

##############################
# Delete Old Backups         #
##############################

# Autogenerated variables
$Backups     = Get-ChildItem -Path $ArchiveFolder | Sort-Object CreationTime -Descending
$NumToDelete = @(($Backups.Count - $MinimumBackups),0) | measure-Object -Maximum | Select-Object -ExpandProperty Maximum
$ToDelete    = $Backups | Select-Object -Last $NumToDelete

# Cleanup old backups. Maintains a minimum number
$ToDelete    | Where-Object {$_.CreationTime -lt ((Get-Date).AddDays( - $RetentionDays))} | Remove-Item -Force -Recurse
